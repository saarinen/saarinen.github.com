<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | ~/dev]]></title>
  <link href="http://saarinen.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://saarinen.github.com/"/>
  <updated>2013-05-22T10:48:41-07:00</updated>
  <id>http://saarinen.github.com/</id>
  <author>
    <name><![CDATA[Steve Saarinen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[To Engine or Not To Engine?]]></title>
    <link href="http://saarinen.github.com/blog/2013/05/21/to-engine-or-not-to-engine/"/>
    <updated>2013-05-21T19:51:00-07:00</updated>
    <id>http://saarinen.github.com/blog/2013/05/21/to-engine-or-not-to-engine</id>
    <content type="html"><![CDATA[<h5>&lt;tl-dr&gt;</h5>


<p>Rails purist wants to use Rails Engines only for the separation of development concerns to support Follow-The-Sun development. Accepting criticism, constructive or otherwise, on this idea.<h5>&lt;/tl-dr&gt;</h5></p>

<p>Is breaking up a Rails application into engines based only on development coordination a Rails anti-pattern?  Or does splitting an application along logical lines for development make sense in an environment with disparate teams?  <a href='http://www.whitepages.com'>WhitePages</a>, like many other Ruby and Rails shops, has been struggling with the current hyper-competitive marketplace for talented engineers.  <a href='http://www.whitepages.com'>WhitePages</a> maintains very high standards for it&rsquo;s engineering teams (with the exception of the author) and has been forced to widen its search for talent not only nationwide, but globally.  Our team has been fortunate enough to find an extremely talented Ruby and Rails engineer in Hungary.  Now comes the real challenge: How do we integrate and coordinate development? As many engineering teams have experienced, follow-the-sun-development introduces several challenges for coordination of development efforts.  As an Agile team, the lack of overlapping work hours and limited communication exacerbates these issues.  Can Rails Engines provide us a mechanism to break down our project into parts that can be easier managed by co-located teams?</p>

<p>With a nine hour time differential, our daily overlap is extremely limited.  We needed a way to allow the remote team to work independently without cross dependencies, eliminating as much as possible blocking events to one team caused by another.  These events generally mean at the least, a several man-hour loss of productivity as changes are rolled back or corrections made to the offending code or systems.  The answer seems to lie in separating development concerns between the two teams as much as possible.  Enter Rails Engines.</p>

<p>Conventionally, Rails Engines solve a code redundancy problem.  A common Rails mantra is Don&rsquo;t Repeat Yourself (DRY). When a piece of functionality is used across several applications, Engines solve the problem of repeated code by making the redundant code portable and easily shared among applications.  Functionality like user authentication, role management, and application administration are commonly implemented as Rails Engines.  What we wanted to do was make use of Engines, not solely for DRY purposes, but to divide a single application into smaller, easily digestible sections to be implemented in parallel, independent of each other.  Let&rsquo;s illustrate with an example:</p>

<p><a href='http://names.whitepages.com'>WhitePages Names (names.whitepages.com)</a> and <a href='http://phones.whitepages.com'>WhitePages Phones (phones.whitepages.com)</a> allow for index-like browsing of <a href='http://www.whitepages.com'>WhitePages</a> data.  Both pieces of functionality share the same application layout and branding, navigation, advertising, etc, but are clearly distinguishable in terms of functionality.  This functionality is unique to the <a href='http://www.whitepages.com'>WhitePages</a> app and not repeated on any other <a href='http://www.whitepages.com'>WhitePages</a> managed properties.  By implementing both of these features as full Rails Engines rather than implementing them within the <a href='http://www.whitepages.com'>WhitePages</a> application itself, we have sectioned off two well defined pieces of development that can be worked on independent from one another, and in relative isolation.  The only moving part should be the application that they both share.  If implemented correctly, there shouldn&rsquo;t be any dependencies on each other or the application itself, drastically limiting the chances of a team effecting the productivity of another.  Quality control and performance management is clearer, and bugs introduced into production can be rolled back easily with a change to the Gemfile of the host application, without having to roll back the code of the host application or any other engines included in that application.  This is a huge win for taking some of the bite out of the potential complications of globalized development.</p>

<p>As somewhat of a Rails purist myself, I was initially resistant to this idea.  In my mind, Engines were purely a DRY containment structure wrapped in an elegant deployment mechanism.  The model described above does not fit that description.  The benefits to the development life cycle however, have won me over.  I&rsquo;m curious what the community thinks about this paradigm.  A Rails anti-pattern? Or a valid use of a utilitarian technology?  Sound off in the comments or hit me up on twitter @_saarinen &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resourceful Routes in the Real World]]></title>
    <link href="http://saarinen.github.com/blog/2013/05/10/specifying-multiple-object-contexts-using-resourceful-routes/"/>
    <updated>2013-05-10T00:11:00-07:00</updated>
    <id>http://saarinen.github.com/blog/2013/05/10/specifying-multiple-object-contexts-using-resourceful-routes</id>
    <content type="html"><![CDATA[<p>When designing a resourceful object hierarchy in Rails, often a single model has meaning in multiple different contexts.  Take for example an application managing rental properties. This application has two main models, Properties and Tenants.  These models have obvious relationships with each other. Relating a set of tenants to a specific property, for example.  These models also have value independent of this relationship. At <a href='http://www.whitepages.com'>WhitePages.com</a> we are often modeling entities that exist in many different contexts, somewhat like a graph. The question then becomes, how can I model a relationship such as a has_many/belongs_to using resourceful routes while still allowing direct root access to a model, or potentially access through several different model connections?. Can I access the same controller resource through different routes? The answer is yes.  Lets take a look at a basic example to see how we can make this happen.</p>

<p>Let&rsquo;s start with the following models:</p>

<p>``` ruby Property and Tenant Models
class Property &lt; ActiveRecord::Base
  has_many :tenants
  accepts_nested_attributes_for :tenants
end</p>

<p>class Tenant &lt; ActiveRecord::Base
  belongs_to :property
end
```</p>

<p>The default scaffolding generator gives us the following routes with both resources at root:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>   Prefix Verb   URI Pattern                    Controller#Action
</span><span class='line'>  tenants GET    /tenants(.:format)             tenants#index
</span><span class='line'>          POST   /tenants(.:format)             tenants#create
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>   new_tenant GET    /tenants/new(.:format)         tenants#new
</span><span class='line'>  edit_tenant GET    /tenants/:id/edit(.:format)    tenants#edit&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>   tenant GET    /tenants/:id(.:format)         tenants#show
</span><span class='line'>          PATCH  /tenants/:id(.:format)         tenants#update
</span><span class='line'>          PUT    /tenants/:id(.:format)         tenants#update
</span><span class='line'>          DELETE /tenants/:id(.:format)         tenants#destroy
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>   properties GET    /properties(.:format)          properties#index&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>          POST   /properties(.:format)          properties#create
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p> new_property GET    /properties/new(.:format)      properties#new
</span><span class='line'>edit_property GET    /properties/:id/edit(.:format) properties#edit&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> property GET    /properties/:id(.:format)      properties#show
</span><span class='line'>          PATCH  /properties/:id(.:format)      properties#update
</span><span class='line'>          PUT    /properties/:id(.:format)      properties#update
</span><span class='line'>          DELETE /properties/:id(.:format)      properties#destroy
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>These routes are workable, but do not correctly illustrate our designed model.  Modeling the routes to match our belongs_to/has_many relationship, we would generate the following nested routes in config/routes.rb:</p>

<p>``` ruby routes.rb
TestApp::Application.routes.draw do
  resources :properties do</p>

<pre><code>resources :tenants
</code></pre>

<p>  end
end
```</p>

<p>Nesting our resources like this, we now have the following routes:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>          Prefix Verb   URI Pattern                                         Controller#Action
</span><span class='line'>property_tenants GET    /properties/:property_id/tenants(.:format)          tenants#index
</span><span class='line'>                 POST   /properties/:property_id/tenants(.:format)          tenants#create
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p> new_property_tenant GET    /properties/:property_id/tenants/new(.:format)      tenants#new
</span><span class='line'>edit_property_tenant GET    /properties/:property_id/tenants/:id/edit(.:format) tenants#edit&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> property_tenant GET    /properties/:property_id/tenants/:id(.:format)      tenants#show
</span><span class='line'>                 PATCH  /properties/:property_id/tenants/:id(.:format)      tenants#update
</span><span class='line'>                 PUT    /properties/:property_id/tenants/:id(.:format)      tenants#update
</span><span class='line'>                 DELETE /properties/:property_id/tenants/:id(.:format)      tenants#destroy
</span><span class='line'>      properties GET    /properties(.:format)                               properties#index
</span><span class='line'>                 POST   /properties(.:format)                               properties#create
</span><span class='line'>    new_property GET    /properties/new(.:format)                           properties#new
</span><span class='line'>   edit_property GET    /properties/:id/edit(.:format)                      properties#edit
</span><span class='line'>        property GET    /properties/:id(.:format)                           properties#show
</span><span class='line'>                 PATCH  /properties/:id(.:format)                           properties#update
</span><span class='line'>                 PUT    /properties/:id(.:format)                           properties#update
</span><span class='line'>                 DELETE /properties/:id(.:format)                           properties#destroy
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Much better! This routing structure allows us to access our list of properties at /properties, a specific property at /properties/:id, a list of a properties Tenants at /properties/:property_id/tenants, and a specific tenant at /properties/:property_id/tenants/:id.  This now models the relationship we&rsquo;ve created between properties and Tenants.  The only problem now is that our tenant controller does not know how to use the :property_id parameter correctly to set our scope.  We need to make a few modifications to make use of the provided property_id.  The majority of our changes are in &lsquo;index&rsquo; and &lsquo;new&rsquo;.</p>

<p>``` ruby tenants_controller.rb
class TenantsController &lt; ApplicationController
  def index</p>

<pre><code>@tenants = Tenant.find_all_by_property_id(params[:property_id])
</code></pre>

<p>  end</p>

<p>  def new</p>

<pre><code>@tenant = Tenant.new({property_id: params[:property_id]})
</code></pre>

<p>  end
end
```</p>

<p>You can see from the code above that we are now using the property_id parameter provided by our route to inform ActiveRecord of the scope of our search as well as initializing new models.  Hooray! But this isn&rsquo;t the goal we are looking for.  What we want is the ability to see Tenants in both the context of a property, but also, to view Tenants without any context.  This will allow us to view all our Tenants without regard to what Property they are assigned to, and provide a Tenant details path without having to find through the Property relationship.  Lets start with adding the rout to our routes file:</p>

<p>``` ruby routes.rb
TestApp::Application.routes.draw do
  resources :tenants</p>

<p>  resources :properties do</p>

<pre><code>resources :tenants
</code></pre>

<p>  end
end
```</p>

<p>This gives us the following routes:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>          Prefix Verb   URI Pattern                                         Controller#Action
</span><span class='line'>         tenants GET    /tenants(.:format)                                  tenants#index
</span><span class='line'>                 POST   /tenants(.:format)                                  tenants#create
</span><span class='line'>      new_tenant GET    /tenants/new(.:format)                              tenants#new
</span><span class='line'>     edit_tenant GET    /tenants/:id/edit(.:format)                         tenants#edit
</span><span class='line'>          tenant GET    /tenants/:id(.:format)                              tenants#show
</span><span class='line'>                 PATCH  /tenants/:id(.:format)                              tenants#update
</span><span class='line'>                 PUT    /tenants/:id(.:format)                              tenants#update
</span><span class='line'>                 DELETE /tenants/:id(.:format)                              tenants#destroy
</span><span class='line'>property_tenants GET    /properties/:property_id/tenants(.:format)          tenants#index
</span><span class='line'>                 POST   /properties/:property_id/tenants(.:format)          tenants#create
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p> new_property_tenant GET    /properties/:property_id/tenants/new(.:format)      tenants#new
</span><span class='line'>edit_property_tenant GET    /properties/:property_id/tenants/:id/edit(.:format) tenants#edit&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> property_tenant GET    /properties/:property_id/tenants/:id(.:format)      tenants#show
</span><span class='line'>                 PATCH  /properties/:property_id/tenants/:id(.:format)      tenants#update
</span><span class='line'>                 PUT    /properties/:property_id/tenants/:id(.:format)      tenants#update
</span><span class='line'>                 DELETE /properties/:property_id/tenants/:id(.:format)      tenants#destroy
</span><span class='line'>      properties GET    /properties(.:format)                               properties#index
</span><span class='line'>                 POST   /properties(.:format)                               properties#create
</span><span class='line'>    new_property GET    /properties/new(.:format)                           properties#new
</span><span class='line'>   edit_property GET    /properties/:id/edit(.:format)                      properties#edit
</span><span class='line'>        property GET    /properties/:id(.:format)                           properties#show
</span><span class='line'>                 PATCH  /properties/:id(.:format)                           properties#update
</span><span class='line'>                 PUT    /properties/:id(.:format)                           properties#update
</span><span class='line'>                 DELETE /properties/:id(.:format)                           properties#destroy
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we have both root access to our Tenants as well as routes through our properties relationship! Success! Well, not yet.  If we use any of the root routes to Tenants, our controller is going to throw an error, as property_id is not being sent along.  Let&rsquo;s fix that right now:</p>

<p>``` ruby tenants_controller.rb
class TenantsController &lt; ApplicationController
  def index</p>

<pre><code>@tenants = params[:property_id].nil? ? Tenant.all : Tenant.find_all_by_property_id(params[:property_id])
</code></pre>

<p>  end</p>

<p>  def new</p>

<pre><code>@tenant = params[:property_id].nil? ? Tenant.new : Tenant.new({property_id: params[:property_id]})
</code></pre>

<p>  end
end
```</p>

<p>Now we can declare success. We now have the ability to access all our Tenants through a root route, as well as through their defined relationship through Properties using a nested route.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on RailsConf 2013]]></title>
    <link href="http://saarinen.github.com/blog/2013/05/08/thoughts-on-railsconf-2013/"/>
    <updated>2013-05-08T13:37:00-07:00</updated>
    <id>http://saarinen.github.com/blog/2013/05/08/thoughts-on-railsconf-2013</id>
    <content type="html"><![CDATA[<p>I left Portland this year with mixed feelings after the four days of <a href='http://www.railsconf.com/2013/'>RailsConf 2013</a>. Listening to DHH&rsquo;s opening keynote outlining the focus of the technology decisions made for the Rails codebase, (specifically, a focus on document based UI rather than a richer, thick client UI) I was prepared to look at the Rails 4 featureset, and decisions made for this latest version, from that world view.  Through the rest of the conference, talks and technologies presented often were in direct conflict with this direction.  Talks focusing on utilization of the new web socket <a href='http://tenderlovemaking.com/2012/07/30/is-it-live.html'>&lsquo;Live Streaming&rsquo;</a> framework for Rails 4, a focus on &ldquo;Rails API&rdquo; architectures using thick clients and JSON transport mediums, and a recurring focus on JavaScript MVC libraries such as ember.js had me questioning whether the community is seeing and embracing the same &ldquo;Rails is document based&rdquo; vision as DHH.  I am in agreement with DHH&rsquo;s vision of not diluting the Rails stack to attempt to &ldquo;be everything to everyone&rdquo;, but enjoyed haring from those who are pushing their visions of where the stack should go.</p>

<p>Several talks (such as one entitled &lsquo;Cache = Cash&rsquo;) demonstrated one alignment of the Rails community: the quest for performance.  Many of the new technologies for Rails 4, including the new (and contentious) <a href='https://github.com/rails/turbolinks/' target='_blank'>TurboLinks</a> framework, have been introduced to increase end user performance.  I am still on the fence regarding the usefulness of the <a href='https://github.com/rails/turbolinks/' target='_blank'>TurboLinks</a> framework, or even whether the implementation is fully baked enough for production web sites.  For example: when developing for an ad-supported application, dealing with third party JavaScript is a constant headache but a necessary evil.  Interrupting the standard request/response model of the web page (which <a href='https://github.com/rails/turbolinks/' target='_blank'>TurboLinks</a> does), and the browser events associated with these actions may have far reaching impacts on the viability of code that we have no organizational control over.  Opting out of the <a href='https://github.com/rails/turbolinks/' target='_blank'>TurboLinks</a> functionality seems to be grossly manual and error prone, requiring all generated links to be specifically marked up.  There may be ways around this but further investigation is needed. Fodder for another Blog post perhaps.</p>

<p>All in all, my biggest takeaway from <a href='http://www.railsconf.com/2013/'>RailsConf 2013</a>. was motivation to contribute to the open source projects built to the benefit of a great many engineers and organization.  The inspiring work shown at the conference, and the people behind them, are truly the engine powering the growth we have seen in the Rails ecosystem.</p>

<p>Countdown to RubyConf?</p>
]]></content>
  </entry>
  
</feed>
